{
	"info": {
		"_postman_id": "313106f2-9c2f-4e21-99b2-231b32bd166d",
		"name": "DXP.PU.AUT.ResourceInventory.NEG",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "DXP.PU.AUT.ResourceInventory.NEG/resource/IP1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "baf714fc-df34-4700-b3c4-c44f30d858d4",
						"exec": [
							"// Functions",
							"function validaCampoArroba(field){",
							"    var texto=\"\";",
							"    for(var i=0; i<field.length; i++){",
							"        var aux = field.split(\":\");",
							"        for(var j=1;j<aux[1].length; j++){",
							"            texto = texto.concat(aux[1][j]);",
							"            if(aux[1][j+1] === \"\\\"\"){",
							"                j=aux[1].length;",
							"            }",
							"        }",
							"        i=field.length;",
							"    }",
							"    return texto;",
							"}",
							"",
							"// Variable declarations",
							"var jsonData = JSON.parse(responseBody);",
							"var auxiliar;",
							"var type;",
							"var schemaLocation;",
							"var baseType;",
							"var referredType;",
							"",
							"// Basic tests",
							"pm.test(\"Valida status 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"//For to create a field thats used to check the value of @ fields",
							"for(var i=0; i<responseBody.length; i++){",
							"    if (responseBody[i] === \"@\"){",
							"        auxiliar = responseBody[i-1];",
							"        auxiliar = auxiliar.concat(responseBody[i]);",
							"        for (var j=i+1; j<responseBody.length ;j++){",
							"            auxiliar = auxiliar.concat(responseBody[j]);",
							"            if(responseBody[j] === \",\" ){",
							"                j=responseBody.length;",
							"            }",
							"        }",
							"        var help = auxiliar.split(\":\");",
							"        if(help[0].slice(2,help[0].length-1) === \"type\"){",
							"            type = auxiliar;",
							"        }",
							"        if(help[0].slice(2,help[0].length-1) === \"schemaLocation\"){",
							"            schemaLocation = auxiliar;",
							"        }",
							"        if(help[0].slice(2,help[0].length-1) === \"baseType\"){",
							"            baseType = auxiliar;",
							"        }",
							"    }",
							"}",
							"",
							"//---------------------Validaciones de Campos----------------------------",
							"",
							"/* pm.test(\"Valida campos\", function() {",
							"",
							"    if (pm.response.to.have.status(200)) {",
							"        pm.expect(true).to.eql(ValidaCampos());",
							"    }",
							"}); */",
							"",
							"pm.test(\"Valida campos\", function() {",
							"",
							"            if (jsonData.hasOwnProperty(\"characteristic\") === false) {",
							"                return false;",
							"            }",
							"            if (pm.expect(jsonData.characteristic).to.have.property(\"city\")) {",
							"//            pm.expect(jsonData.characteristic.city).to.be.equal(\"CAPITAL FEDERAL\");",
							"            }",
							"            if (pm.expect(jsonData.characteristic).to.have.property(\"country\")) {",
							"//            pm.expect(jsonData.characteristic.country).to.be.equal(\"ARGENTINA\");",
							"            }",
							"            if (pm.expect(jsonData.characteristic).to.have.property(\"stateOrProvince\")) {",
							"//            pm.expect(jsonData.characteristic.stateOrProvince).to.be.equal(\"CAPITAL FEDERAL\");",
							"            }",
							"            if (pm.expect(jsonData.characteristic).to.have.property(\"locality\")) {",
							"//            pm.expect(jsonData.characteristic.locality).to.be.equal(\"CAPITAL FEDERAL\");",
							"            }",
							"            if (pm.expect(jsonData.characteristic).to.have.property(\"x\")) {",
							"//            pm.expect(jsonData.characteristic.x).to.be.equal(\"-58.4159739473957\");",
							"            }",
							"            if (pm.expect(jsonData.characteristic).to.have.property(\"y\")) {",
							"//            pm.expect(jsonData.characteristic.y).to.be.equal(\"-34.6435898740907\");",
							"            }",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/resourceInventoryManagement/v1/resource/152.168.141.172",
					"host": [
						"{{host}}"
					],
					"path": [
						"resourceInventoryManagement",
						"v1",
						"resource",
						"152.168.141.172"
					]
				}
			},
			"response": []
		},
		{
			"name": "DXP.PU.AUT.ResourceInventory.NEG/resource/IP2",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "baf714fc-df34-4700-b3c4-c44f30d858d4",
						"exec": [
							"// Functions",
							"function validaCampoArroba(field){",
							"    var texto=\"\";",
							"    for(var i=0; i<field.length; i++){",
							"        var aux = field.split(\":\");",
							"        for(var j=1;j<aux[1].length; j++){",
							"            texto = texto.concat(aux[1][j]);",
							"            if(aux[1][j+1] === \"\\\"\"){",
							"                j=aux[1].length;",
							"            }",
							"        }",
							"        i=field.length;",
							"    }",
							"    return texto;",
							"}",
							"",
							"// Variable declarations",
							"var jsonData = JSON.parse(responseBody);",
							"var auxiliar;",
							"var type;",
							"var schemaLocation;",
							"var baseType;",
							"var referredType;",
							"",
							"// Basic tests",
							"pm.test(\"Valida status 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"//For to create a field thats used to check the value of @ fields",
							"for(var i=0; i<responseBody.length; i++){",
							"    if (responseBody[i] === \"@\"){",
							"        auxiliar = responseBody[i-1];",
							"        auxiliar = auxiliar.concat(responseBody[i]);",
							"        for (var j=i+1; j<responseBody.length ;j++){",
							"            auxiliar = auxiliar.concat(responseBody[j]);",
							"            if(responseBody[j] === \",\" ){",
							"                j=responseBody.length;",
							"            }",
							"        }",
							"        var help = auxiliar.split(\":\");",
							"        if(help[0].slice(2,help[0].length-1) === \"type\"){",
							"            type = auxiliar;",
							"        }",
							"        if(help[0].slice(2,help[0].length-1) === \"schemaLocation\"){",
							"            schemaLocation = auxiliar;",
							"        }",
							"        if(help[0].slice(2,help[0].length-1) === \"baseType\"){",
							"            baseType = auxiliar;",
							"        }",
							"    }",
							"}",
							"",
							"//---------------------Validaciones de Campos----------------------------",
							"",
							"/* pm.test(\"Valida campos\", function() {",
							"",
							"    if (pm.response.to.have.status(200)) {",
							"        pm.expect(true).to.eql(ValidaCampos());",
							"    }",
							"}); */",
							"",
							"pm.test(\"Valida campos\", function() {",
							"",
							"            if (jsonData.hasOwnProperty(\"characteristic\") === false) {",
							"                return false;",
							"            }",
							"            if (pm.expect(jsonData.characteristic).to.have.property(\"city\")) {",
							"//            pm.expect(jsonData.characteristic.city).to.be.equal(\"CAPITAL FEDERAL\");",
							"            }",
							"            if (pm.expect(jsonData.characteristic).to.have.property(\"country\")) {",
							"//            pm.expect(jsonData.characteristic.country).to.be.equal(\"ARGENTINA\");",
							"            }",
							"            if (pm.expect(jsonData.characteristic).to.have.property(\"stateOrProvince\")) {",
							"//            pm.expect(jsonData.characteristic.stateOrProvince).to.be.equal(\"CAPITAL FEDERAL\");",
							"            }",
							"            if (pm.expect(jsonData.characteristic).to.have.property(\"locality\")) {",
							"//            pm.expect(jsonData.characteristic.locality).to.be.equal(\"CAPITAL FEDERAL\");",
							"            }",
							"            if (pm.expect(jsonData.characteristic).to.have.property(\"x\")) {",
							"//            pm.expect(jsonData.characteristic.x).to.be.equal(\"-58.4159739473957\");",
							"            }",
							"            if (pm.expect(jsonData.characteristic).to.have.property(\"y\")) {",
							"//            pm.expect(jsonData.characteristic.y).to.be.equal(\"-34.6435898740907\");",
							"            }",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/resourceInventoryManagement/v1/resource/152.168.141.245",
					"host": [
						"{{host}}"
					],
					"path": [
						"resourceInventoryManagement",
						"v1",
						"resource",
						"152.168.141.245"
					]
				}
			},
			"response": []
		},
		{
			"name": "DXP.PU.AUT.ResourceInventory.NEG/resource/IP3",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "baf714fc-df34-4700-b3c4-c44f30d858d4",
						"exec": [
							"// Functions",
							"function validaCampoArroba(field){",
							"    var texto=\"\";",
							"    for(var i=0; i<field.length; i++){",
							"        var aux = field.split(\":\");",
							"        for(var j=1;j<aux[1].length; j++){",
							"            texto = texto.concat(aux[1][j]);",
							"            if(aux[1][j+1] === \"\\\"\"){",
							"                j=aux[1].length;",
							"            }",
							"        }",
							"        i=field.length;",
							"    }",
							"    return texto;",
							"}",
							"",
							"// Variable declarations",
							"var jsonData = JSON.parse(responseBody);",
							"var auxiliar;",
							"var type;",
							"var schemaLocation;",
							"var baseType;",
							"var referredType;",
							"",
							"// Basic tests",
							"pm.test(\"Valida status 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"//For to create a field thats used to check the value of @ fields",
							"for(var i=0; i<responseBody.length; i++){",
							"    if (responseBody[i] === \"@\"){",
							"        auxiliar = responseBody[i-1];",
							"        auxiliar = auxiliar.concat(responseBody[i]);",
							"        for (var j=i+1; j<responseBody.length ;j++){",
							"            auxiliar = auxiliar.concat(responseBody[j]);",
							"            if(responseBody[j] === \",\" ){",
							"                j=responseBody.length;",
							"            }",
							"        }",
							"        var help = auxiliar.split(\":\");",
							"        if(help[0].slice(2,help[0].length-1) === \"type\"){",
							"            type = auxiliar;",
							"        }",
							"        if(help[0].slice(2,help[0].length-1) === \"schemaLocation\"){",
							"            schemaLocation = auxiliar;",
							"        }",
							"        if(help[0].slice(2,help[0].length-1) === \"baseType\"){",
							"            baseType = auxiliar;",
							"        }",
							"    }",
							"}",
							"",
							"//---------------------Validaciones de Campos----------------------------",
							"",
							"/* pm.test(\"Valida campos\", function() {",
							"",
							"    if (pm.response.to.have.status(200)) {",
							"        pm.expect(true).to.eql(ValidaCampos());",
							"    }",
							"}); */",
							"",
							"pm.test(\"Valida campos\", function() {",
							"",
							"            if (jsonData.hasOwnProperty(\"characteristic\") === false) {",
							"                return false;",
							"            }",
							"            if (pm.expect(jsonData.characteristic).to.have.property(\"city\")) {",
							"//            pm.expect(jsonData.characteristic.city).to.be.equal(\"CAPITAL FEDERAL\");",
							"            }",
							"            if (pm.expect(jsonData.characteristic).to.have.property(\"country\")) {",
							"//            pm.expect(jsonData.characteristic.country).to.be.equal(\"ARGENTINA\");",
							"            }",
							"            if (pm.expect(jsonData.characteristic).to.have.property(\"stateOrProvince\")) {",
							"//            pm.expect(jsonData.characteristic.stateOrProvince).to.be.equal(\"CAPITAL FEDERAL\");",
							"            }",
							"            if (pm.expect(jsonData.characteristic).to.have.property(\"locality\")) {",
							"//            pm.expect(jsonData.characteristic.locality).to.be.equal(\"CAPITAL FEDERAL\");",
							"            }",
							"            if (pm.expect(jsonData.characteristic).to.have.property(\"x\")) {",
							"//            pm.expect(jsonData.characteristic.x).to.be.equal(\"-58.4159739473957\");",
							"            }",
							"            if (pm.expect(jsonData.characteristic).to.have.property(\"y\")) {",
							"//            pm.expect(jsonData.characteristic.y).to.be.equal(\"-34.6435898740907\");",
							"            }",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/resourceInventoryManagement/v1/resource/190.190.125.253",
					"host": [
						"{{host}}"
					],
					"path": [
						"resourceInventoryManagement",
						"v1",
						"resource",
						"190.190.125.253"
					]
				}
			},
			"response": []
		}
	],
	"protocolProfileBehavior": {}
}